#include "engine.common.qabi"

abi (trap_Printf) void Com_Print( const char *fmt );
abi (trap_SendConsoleCommand) void Cbuf_ExecuteText( int exec_when, const char *text );
abi (trap_LocateGameData) void SV_LocateGameData( gentity_t *gEnts, int numGEntities, int sizeofGEntity_t, playerState_t *clients, int sizeofGClient );
abi (trap_DropClient) void SV_GameDropClient( int clientNum, const char *reason );
abi (trap_SendServerCommand) void SV_GameSendServerCommand( int clientNum, const char *text );
abi (trap_SetConfigstring) void SV_SetConfigstring( int num, const char *string );
abi (trap_GetConfigstring) void SV_GetConfigstring( int num, char *buffer, int bufferSize );
abi (trap_GetUserinfo) void SV_GetUserinfo( int num, char *buffer, int bufferSize );
abi (trap_SetUserinfo) void SV_SetUserinfo( int num, const char *buffer );
abi (trap_GetServerinfo) void SV_GetServerinfo( char *buffer, int bufferSize );
abi (trap_SetBrushModel) void SV_SetBrushModel( gentity_t *ent, const char *name );
abi (trap_Trace) void SV_Trace( trace_t *results, const vec3_t start, const vec3_t mins, const vec3_t maxs, const vec3_t end, int passEntityNum, int contentmask, qboolean capsule = qfalse );
abi (trap_TraceCapsule) void SV_Trace( trace_t *results, const vec3_t start, const vec3_t mins, const vec3_t maxs, const vec3_t end, int passEntityNum, int contentmask, qboolean capsule = qtrue );
abi (trap_PointContents) int SV_PointContents( const vec3_t point, int passEntityNum );
abi (trap_InPVS) qboolean SV_inPVS( const vec3_t p1, const vec3_t p2 );
abi (trap_InPVSIgnorePortals) qboolean SV_inPVSIgnorePortals( const vec3_t p1, const vec3_t p2 );
abi (trap_AdjustAreaPortalState) void SV_AdjustAreaPortalState( gentity_t *ent, qboolean open );
abi (trap_AreasConnected) qboolean CM_AreasConnected( int area1, int area2 );
abi (trap_LinkEntity) void SV_LinkEntity( gentity_t *ent );
abi (trap_UnlinkEntity) void SV_UnlinkEntity( gentity_t *ent );
abi (trap_EntitiesInBox) int SV_AreaEntities( const vec3_t mins, const vec3_t maxs, int *list, int maxcount );
abi (trap_EntityContact) qboolean SV_EntityContact( const vec3_t mins, const vec3_t maxs, const gentity_t *ent, qboolean capsule = qfalse );
abi (trap_EntityContactCapsule) qboolean SV_EntityContact( const vec3_t mins, const vec3_t maxs, const gentity_t *ent, qboolean capsule = qtrue );
abi (trap_BotAllocateClient) int SV_BotAllocateClient( void );
abi (trap_BotFreeClient) void SV_BotFreeClient( int clientNum );
abi (trap_GetUsercmd) void SV_GetUsercmd( int clientNum, usercmd_t *cmd );
abi (trap_GetEntityToken) qboolean SV_GameGetEntityToken( char *buffer, int bufferSize );
abi (trap_DebugPolygonCreate) int BotImport_DebugPolygonCreate(int color, int numPoints, vec3_t *points);
abi (trap_DebugPolygonDelete) void BotImport_DebugPolygonDelete(int id);
abi (trap_BotLibSetup) int Export_BotLibSetup( void );
abi (trap_BotLibShutdown) int Export_BotLibShutdown( void );
abi (trap_BotLibVarSet) int Export_BotLibVarSet(char *var_name, char *value);
abi (trap_BotLibVarGet) int Export_BotLibVarGet(char *var_name, char *value, int size);
abi (trap_BotLibDefine) int PC_AddGlobalDefine(char *string);
abi (trap_BotLibStartFrame) int Export_BotLibStartFrame(float time);
abi (trap_BotLibLoadMap) int Export_BotLibLoadMap(const char *mapname);
abi (trap_BotLibUpdateEntity) int Export_BotLibUpdateEntity(int ent, void *bue);
abi (trap_BotLibTest) int BotExportTest(int parm0, char *parm1, vec3_t parm2, vec3_t parm3);
abi (trap_BotGetSnapshotEntity) int SV_BotGetSnapshotEntity( int clientNum, int sequence );
abi (trap_BotGetServerCommand) int SV_BotGetConsoleMessage(int clientNum, char *message, int size);
abi (trap_BotUserCommand) void SV_BotUserCommand(int clientNum, usercmd_t *ucmd);
abi (trap_AAS_EntityInfo) void AAS_EntityInfo(int entnum, void *info);
abi (trap_AAS_Initialized) int AAS_Initialized(void);
abi (trap_AAS_PresenceTypeBoundingBox) void AAS_PresenceTypeBoundingBox(int presencetype, vec3_t mins, vec3_t maxs);
abi (trap_AAS_Time) float AAS_Time(void);
abi (trap_AAS_PointAreaNum) int AAS_PointAreaNum(vec3_t point);
abi (trap_AAS_PointReachabilityAreaIndex) int AAS_PointReachabilityAreaIndex(vec3_t point);
abi (trap_AAS_TraceAreas) int AAS_TraceAreas(vec3_t start, vec3_t end, int *areas, vec3_t *points, int maxareas);
abi (trap_AAS_BBoxAreas) int AAS_BBoxAreas(vec3_t absmins, vec3_t absmaxs, int *areas, int maxareas);
abi (trap_AAS_AreaInfo) int AAS_AreaInfo( int areanum, void *info );
abi (trap_AAS_PointContents) int AAS_PointContents(vec3_t point);
abi (trap_AAS_NextBSPEntity) int AAS_NextBSPEntity(int ent);
abi (trap_AAS_ValueForBSPEpairKey) int AAS_ValueForBSPEpairKey(int ent, char *key, char *value, int size);
abi (trap_AAS_VectorForBSPEpairKey) int AAS_VectorForBSPEpairKey(int ent, char *key, vec3_t v);
abi (trap_AAS_FloatForBSPEpairKey) int AAS_FloatForBSPEpairKey(int ent, char *key, float *value);
abi (trap_AAS_IntForBSPEpairKey) int AAS_IntForBSPEpairKey(int ent, char *key, int *value);
abi (trap_AAS_AreaReachability) int AAS_AreaReachability(int areanum);
abi (trap_AAS_AreaTravelTimeToGoalArea) int AAS_AreaTravelTimeToGoalArea(int areanum, vec3_t origin, int goalareanum, int travelflags);
abi (trap_AAS_EnableRoutingArea) int AAS_EnableRoutingArea( int areanum, int enable );
abi (trap_AAS_PredictRoute) int AAS_PredictRoute(void*route, int areanum, vec3_t origin, int goalareanum, int travelflags, int maxareas, int maxtime, int stopevent, int stopcontents, int stoptfl, int stopareanum);
abi (trap_AAS_AlternativeRouteGoals) int AAS_AlternativeRouteGoals(vec3_t start, int startareanum, vec3_t goal, int goalareanum, int travelflags, void *altroutegoals, int maxaltroutegoals, int type);
abi (trap_AAS_Swimming) int AAS_Swimming(vec3_t origin);
abi (trap_AAS_PredictClientMovement) int AAS_PredictClientMovement(void *move, int entnum, vec3_t origin, int presencetype, int onground, vec3_t velocity, vec3_t cmdmove, int cmdframes, int maxframes, float frametime, int stopevent, int stopareanum, int visualize);
abi (trap_EA_Say) void EA_Say(int client, char *str);
abi (trap_EA_SayTeam) void EA_SayTeam(int client, char *str);
abi (trap_EA_Command) void EA_Command(int client, char *command);
abi (trap_EA_Action) void EA_Action(int client, int action);
abi (trap_EA_Gesture) void EA_Gesture(int client);
abi (trap_EA_Talk) void EA_Talk(int client);
abi (trap_EA_Attack) void EA_Attack(int client);
abi (trap_EA_Use) void EA_Use(int client);
abi (trap_EA_Respawn) void EA_Respawn(int client);
abi (trap_EA_Crouch) void EA_Crouch(int client);
abi (trap_EA_MoveUp) void EA_MoveUp(int client);
abi (trap_EA_MoveDown) void EA_MoveDown(int client);
abi (trap_EA_MoveForward) void EA_MoveForward(int client);
abi (trap_EA_MoveBack) void EA_MoveBack(int client);
abi (trap_EA_MoveLeft) void EA_MoveLeft(int client);
abi (trap_EA_MoveRight) void EA_MoveRight(int client);
abi (trap_EA_SelectWeapon) void EA_SelectWeapon(int client, int weapon);
abi (trap_EA_Jump) void EA_Jump(int client);
abi (trap_EA_DelayedJump) void EA_DelayedJump(int client);
abi (trap_EA_Move) void EA_Move(int client, vec3_t dir, float speed);
abi (trap_EA_View) void EA_View(int client, vec3_t viewangles);
abi (trap_EA_EndRegular) void EA_EndRegular(int client, float thinktime);
abi (trap_EA_GetInput) void EA_GetInput(int client, float thinktime, void *input);
abi (trap_EA_ResetInput) void EA_ResetInput(int client);
abi (trap_BotLoadCharacter) int BotLoadCharacter(char *charfile, float skill);
abi (trap_BotFreeCharacter) void BotFreeCharacter(int character);
abi (trap_Characteristic_Float) float Characteristic_Float(int character, int index);
abi (trap_Characteristic_BFloat) float Characteristic_BFloat(int character, int index, float min, float max);
abi (trap_Characteristic_Integer) int Characteristic_Integer(int character, int index);
abi (trap_Characteristic_BInteger) int Characteristic_BInteger(int character, int index, int min, int max);
abi (trap_Characteristic_String) void Characteristic_String(int character, int index, char *buf, int size);
abi (trap_BotAllocChatState) int BotAllocChatState(void);
abi (trap_BotFreeChatState) void BotFreeChatState(int handle);
abi (trap_BotQueueConsoleMessage) void BotQueueConsoleMessage(int chatstate, int type, char *message);
abi (trap_BotRemoveConsoleMessage) void BotRemoveConsoleMessage(int chatstate, int handle);
abi (trap_BotNextConsoleMessage) int BotNextConsoleMessage(int chatstate, void *cm);
abi (trap_BotNumConsoleMessages) int BotNumConsoleMessages(int chatstate);
abi (trap_BotInitialChat) void BotInitialChat(int chatstate, char *type, int mcontext, char *var0, char *var1, char *var2, char *var3, char *var4, char *var5, char *var6, char *var7 );
abi (trap_BotNumInitialChats) int BotNumInitialChats(int chatstate, char *type);
abi (trap_BotReplyChat) int BotReplyChat(int chatstate, char *message, int mcontext, int vcontext, char *var0, char *var1, char *var2, char *var3, char *var4, char *var5, char *var6, char *var7 );
abi (trap_BotChatLength) int BotChatLength(int chatstate);
abi (trap_BotEnterChat) void BotEnterChat(int chatstate, int client, int sendto);
abi (trap_BotGetChatMessage) void BotGetChatMessage(int chatstate, char *buf, int size);
abi (trap_StringContains) int StringContains(char *str1, char *str2, int casesensitive);
abi (trap_BotFindMatch) int BotFindMatch(char *str, void *match, unsigned long int context);
abi (trap_BotMatchVariable) void BotMatchVariable(void *match, int variable, char *buf, int size);
abi (trap_UnifyWhiteSpaces) void UnifyWhiteSpaces(char *string);
abi (trap_BotReplaceSynonyms) void BotReplaceSynonyms(char *string, unsigned long int context);
abi (trap_BotLoadChatFile) int BotLoadChatFile(int chatstate, char *chatfile, char *chatname);
abi (trap_BotSetChatGender) void BotSetChatGender(int chatstate, int gender);
abi (trap_BotSetChatName) void BotSetChatName(int chatstate, char *name, int client);
abi (trap_BotResetGoalState) void BotResetGoalState(int goalstate);
abi (trap_BotResetAvoidGoals) void BotResetAvoidGoals(int goalstate);
abi (trap_BotRemoveFromAvoidGoals) void BotRemoveFromAvoidGoals(int goalstate, int number);
abi (trap_BotPushGoal) void BotPushGoal(int goalstate, void *goal);
abi (trap_BotPopGoal) void BotPopGoal(int goalstate);
abi (trap_BotEmptyGoalStack) void BotEmptyGoalStack(int goalstate);
abi (trap_BotDumpAvoidGoals) void BotDumpAvoidGoals(int goalstate);
abi (trap_BotDumpGoalStack) void BotDumpGoalStack(int goalstate);
abi (trap_BotGoalName) void BotGoalName(int number, char *name, int size);
abi (trap_BotGetTopGoal) int BotGetTopGoal(int goalstate, void *goal);
abi (trap_BotGetSecondGoal) int BotGetSecondGoal(int goalstate, void *goal);
abi (trap_BotChooseLTGItem) int BotChooseLTGItem(int goalstate, vec3_t origin, int *inventory, int travelflags);
abi (trap_BotChooseNBGItem) int BotChooseNBGItem(int goalstate, vec3_t origin, int *inventory, int travelflags, void *ltg, float maxtime);
abi (trap_BotTouchingGoal) int BotTouchingGoal(vec3_t origin, void *goal);
abi (trap_BotItemGoalInVisButNotVisible) int BotItemGoalInVisButNotVisible(int viewer, vec3_t eye, vec3_t viewangles, void *goal);
abi (trap_BotGetLevelItemGoal) int BotGetLevelItemGoal(int index, char *classname, void *goal);
abi (trap_BotGetNextCampSpotGoal) int BotGetNextCampSpotGoal(int num, void *goal);
abi (trap_BotGetMapLocationGoal) int BotGetMapLocationGoal(char *name, void *goal);
abi (trap_BotAvoidGoalTime) float BotAvoidGoalTime(int goalstate, int number);
abi (trap_BotSetAvoidGoalTime) void BotSetAvoidGoalTime(int goalstate, int number, float avoidtime);
abi (trap_BotInitLevelItems) void BotInitLevelItems(void);
abi (trap_BotUpdateEntityItems) void BotUpdateEntityItems(void);
abi (trap_BotLoadItemWeights) int BotLoadItemWeights(int goalstate, char *filename);
abi (trap_BotFreeItemWeights) void BotFreeItemWeights(int goalstate);
abi (trap_BotInterbreedGoalFuzzyLogic) void BotInterbreedGoalFuzzyLogic(int parent1, int parent2, int child);
abi (trap_BotSaveGoalFuzzyLogic) void BotSaveGoalFuzzyLogic(int goalstate, char *filename);
abi (trap_BotMutateGoalFuzzyLogic) void BotMutateGoalFuzzyLogic(int goalstate, float range);
abi (trap_BotAllocGoalState) int BotAllocGoalState(int state);
abi (trap_BotFreeGoalState) void BotFreeGoalState(int handle);
abi (trap_BotResetMoveState) void BotResetMoveState(int movestate);
abi (trap_BotAddAvoidSpot) void BotAddAvoidSpot(int movestate, vec3_t origin, float radius, int type);
abi (trap_BotMoveToGoal) void BotMoveToGoal(void *result, int movestate, void *goal, int travelflags);
abi (trap_BotMoveInDirection) int BotMoveInDirection(int movestate, vec3_t dir, float speed, int type);
abi (trap_BotResetAvoidReach) void BotResetAvoidReach(int movestate);
abi (trap_BotResetLastAvoidReach) void BotResetLastAvoidReach(int movestate);
abi (trap_BotReachabilityArea) int BotReachabilityArea(vec3_t origin, int testground);
abi (trap_BotMovementViewTarget) int BotMovementViewTarget(int movestate, void *goal, int travelflags, float lookahead, vec3_t target);
abi (trap_BotPredictVisiblePosition) int BotPredictVisiblePosition(vec3_t origin, int areanum, void *goal, int travelflags, vec3_t target);
abi (trap_BotAllocMoveState) int BotAllocMoveState(void);
abi (trap_BotFreeMoveState) void BotFreeMoveState(int handle);
abi (trap_BotInitMoveState) void BotInitMoveState(int handle, void *initmove);
abi (trap_BotChooseBestFightWeapon) int BotChooseBestFightWeapon(int weaponstate, int *inventory);
abi (trap_BotGetWeaponInfo) void BotGetWeaponInfo(int weaponstate, int weapon, void *weaponinfo);
abi (trap_BotLoadWeaponWeights) int BotLoadWeaponWeights(int weaponstate, char *filename);
abi (trap_BotAllocWeaponState) int BotAllocWeaponState(void);
abi (trap_BotFreeWeaponState) void BotFreeWeaponState(int weaponstate);
abi (trap_BotResetWeaponState) void BotResetWeaponState(int weaponstate);
abi (trap_GeneticParentsAndChildSelection) int GeneticParentsAndChildSelection(int numranks, float *ranks, int *parent1, int *parent2, int *child);
abi (trap_PC_LoadSource) int PC_LoadSourceHandle( const char *filename );
abi (trap_PC_FreeSource) int PC_FreeSourceHandle( int handle );
abi (trap_PC_ReadToken) int PC_ReadTokenHandle( int handle, pc_token_t *pc_token );
abi (trap_PC_SourceFileAndLine) int PC_SourceFileAndLine( int handle, char *filename, int *line );
